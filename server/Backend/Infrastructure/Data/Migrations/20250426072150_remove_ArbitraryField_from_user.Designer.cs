// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250426072150_remove_ArbitraryField_from_user")]
    partial class remove_ArbitraryField_from_user
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Chat.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Domain.Chat.Entities.Message.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_selected");

                    b.Property<Guid?>("LinkId")
                        .HasColumnType("uuid")
                        .HasColumnName("link_id");

                    b.Property<Guid?>("chat_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("chat_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Domain.User.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxMessages")
                        .HasColumnType("integer")
                        .HasColumnName("max_messages");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PriceIdDev")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("price_id_dev");

                    b.Property<string>("PriceIdProd")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("price_id_prod");

                    b.HasKey("Id");

                    b.ToTable("subscriptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaxMessages = 99999999,
                            Name = "plus",
                            Price = 20m,
                            PriceIdDev = "price_1QZZCzHXcNm6rEhrhlLXQCuE",
                            PriceIdProd = "price_1QX4OCHXcNm6rEhrVFa1lJVm"
                        });
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("SentMessages")
                        .HasColumnType("integer")
                        .HasColumnName("sent_messages");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text")
                        .HasColumnName("stripe_customer_id");

                    b.Property<int?>("subscription_id")
                        .HasColumnType("integer");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Domain.User.User.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("email");
                        });

                    b.HasKey("Id");

                    b.HasIndex("subscription_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Chat.Chat", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Chat.Entities.Message.Message", b =>
                {
                    b.HasOne("Domain.Chat.Chat", null)
                        .WithMany("Messages")
                        .HasForeignKey("chat_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Chat.Entities.Sender", "Sender", b1 =>
                        {
                            b1.Property<Guid>("MessageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("sender_value");

                            b1.HasKey("MessageId");

                            b1.ToTable("messages");

                            b1.WithOwner()
                                .HasForeignKey("MessageId");
                        });

                    b.Navigation("Sender")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.HasOne("Domain.User.Entities.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("subscription_id");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.Chat.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
